{"version":3,"sources":["assets/image.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","useStyles","makeStyles","theme","appHeader","position","overflow","headerContent","alignItems","display","flexDirection","justifyContent","flex","middleContent","bottomContent","icon","margin","spacing","IconImage","width","right","bottom","opacity","tagLine","color","linkClass","borderRadius","border","height","textDecoration","App","console","log","ImageIcon","classes","React","useEffect","loadCSS","document","querySelector","react_default","a","createElement","className","clsx","src","Typography","variant","component","href","target","Icon","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7156e767.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image.5be27c3b.png\";","import React from 'react';\nimport './App.css';\nimport { Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { loadCSS } from 'fg-loadcss';\nimport clsx from 'clsx';\nimport Icon from '@material-ui/core/Icon';\nimport ImageIcon from './assets/image.png'\n// import {  } from \"react-router-dom\"\n\nconst useStyles = makeStyles(theme => ({\n  appHeader: {\n    position: \"relative\",\n    overflow: \"hidden\"\n  },\n  headerContent: {\n    alignItems: \"center\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"flex-end\",\n    flex: 4\n  },\n  middleContent: {\n    flex: 4\n  },\n  bottomContent: {\n    flex: 1,\n    display: \"flex\",\n    flexDirection: \"row\"\n  },\n  icon: {\n    margin: theme.spacing(2),\n  },\n  IconImage: {\n    position: \"absolute\",\n    width: \"200px\",\n    right: \"-50px\",\n    bottom: \"0px\",\n    opacity: \".4\"\n  },\n  tagLine: {\n    color: \"#dad9d9\"\n  },\n  linkClass: {\n    color: \"inherit\",\n    display: \"inline-block\",\n    borderRadius: \"100%\",\n    border: \"1px solid #6f6f6f\",\n    margin: \"10px\",\n    width: \"60px\",\n    height: \"60px\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textDecoration: \"none\"\n  }\n}));\n\n\nfunction App() {\n\n  console.log(ImageIcon);\n\n  const classes = useStyles();\n\n  React.useEffect(() => {\n    loadCSS(\n      'https://use.fontawesome.com/releases/v5.1.0/css/all.css',\n      document.querySelector('#font-awesome-css'),\n    );\n  }, []);\n\n\n  return (\n    <div className=\"App\">\n      <header className={clsx('App-header', classes.appHeader)}>\n        <img className={classes.IconImage} src={ImageIcon} />\n        <div className={classes.headerContent} >\n          <Typography variant=\"h1\" component=\"h1\">Arun Wilson</Typography>\n          <Typography><small className={classes.tagLine} >An Another Dev Fellow :)</small></Typography>\n        </div>\n        <div className={classes.middleContent} >\n          {/* <p>\n            Passionate & Enthusiastic Programmer, Full Stack Developer, Proficient in Web Development.<br />\n            Linux Lover.<br />\n            Proficient in JavaScript ( NodeJS ) & PHP.<br />\n            Serverless Development with AWS Lambda ( FaaS ).<br />\n            Currently focused on React and React native Development.<br />\n            Have hands on Experience in technologies like HTML,CSS,Javascript,PHP, Symfony PHP Framework, MYSQL,AWS (Lambda, Elastic Transcoder, S3, Route53,Cloudwatch, Ec2 etc), Joomla, Wordpress, Elgg, PHP Social (Dolphin).<br />\n            Have 5 Years of Experience in Software Industry.<br />\n            Lead JavaScript Developer at Techversant Infotech<br />\n          </p> */}\n        </div>\n        <div className={classes.bottomContent} >\n          <a className={classes.linkClass} href=\"https://twitter.com/007arunwilson\" target=\"_blank\" >\n            <Icon className={clsx(classes.icon, 'fab fa-twitter')} />\n          </a>\n          <a className={classes.linkClass} href=\"https://github.com/007arunwilson\" target=\"_blank\" >\n            <Icon className={clsx(classes.icon, 'fab fa-github')} />\n          </a>\n          <a className={classes.linkClass} href=\"https://www.linkedin.com/in/007arunwilson/\" target=\"_blank\" >\n            <Icon className={clsx(classes.icon, 'fab fa-linkedin-in')} />\n          </a>\n          <a className={classes.linkClass} href=\"https://www.facebook.com/cyberinfoscripter\" target=\"_blank\" >\n            <Icon className={clsx(classes.icon, 'fab fa-facebook-square')} />\n          </a>\n          <a className={classes.linkClass} href=\"https://www.instagram.com/007arunwilson\" target=\"_blank\" >\n            <Icon className={clsx(classes.icon, 'fab fa-instagram')} />\n          </a>\n          <a className={classes.linkClass} href=\"https://twitter.com/007arunwilson\" target=\"_blank\" >\n            <Icon className={clsx(classes.icon, 'fa fa-envelope')} />\n          </a>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from \"react-router-dom\"\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}